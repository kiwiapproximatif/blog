{"pageProps":{"meta":{"title":"Introduction à React Native","description":"Une « brève » introduction à React Native et à la bibliothèque Expo, le tout en TypeScript.","tags":["Android","Android Studio","Expo","React Native","TypeScript"],"publishedAt":"24/10/2022"},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Installation de l'environnement Android\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pour lancer une application React Native, nous allons avoir besoin de JDK 11 de Java et d'Android Studio.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Via Aptitude\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Téléchargement d'Android Studio possible via la Jetbrains Toolbox ou bien depuis ce \", _jsx(_components.a, {\n        href: \"https://developer.android.com/studio\",\n        title: \"lien\",\n        children: \"Téléchargement Android Studio\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Installation de la JDK 11 :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"sudo apt install openjdk-11-jdk\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ne pas oublier de rajouter ces variables d'environnement à votre shell :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"export ANDROID_HOME=$HOME/Android/Sdk\\nexport PATH=$PATH:$ANDROID_HOME/tools\\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Via Homebrew\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour installer Homebrew, veuillez suivre ce \", _jsx(_components.a, {\n        href: \"https://brew.sh/index_fr\",\n        title: \"lien\",\n        children: \"Installation de Homebrew\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Installation d'Android Studio :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"brew install --cask android-studio\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Installation de JDK 11 :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"brew install openjdk@11\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ne pas oublier de rajouter ces variables d'environnement à votre shell :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"export PATH=\\\"/opt/homebrew/opt/openjdk@11/bin:$PATH\\\"\\nexport ANDROID_HOME=/Users/$WHOAMI/Library/Android/sdk\\nexport PATH=$ANDROID_HOME/platform-tools:$PATH\\nexport PATH=$ANDROID_HOME/tools:$PATH\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Installation de NodeJS\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Il est nécessaire d'installer NodeJS pour faire fonctionner React Native.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Via Aptitude\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"sudo apt install nodejs npm\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Via Homebrew\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"brew install node\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Via ASDF (conseillée)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Pour installer asdf, veuillez suivre ce \", _jsx(_components.a, {\n        href: \"https://asdf-vm.com/guide/getting-started.html\",\n        title: \"lien\",\n        children: \"Installation d'ASDF\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\\nasdf install nodejs lts\\nasdf global nodejs lts\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hello World comme autrefois\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nous allons créer une application React Native à l'aide d'une template TypeScript :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"npx react-native init Hello --template react-native-template-typescript\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"On se déplace vers la racine du projet et on démarre un serveur Metro :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"npm run start\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Note\"\n      }), \" : \", _jsx(_components.em, {\n        children: _jsx(_components.strong, {\n          children: \"Ne pas oublier de lancer un émulateur Android via Android Studio.\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensuite dans un autre terminal, on démarre l'application :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"npm run android\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Si tout se passe correctement vous devriez voir apparaître « Welcome to React Native » sur l'émulateur (cela peut mettre un certain temps au premier build).\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hello World avec Expo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Nous allons créer une application React Native à l'aide d'une template Expo TypeScript. Veuillez choisir l'option \", _jsx(_components.strong, {\n        children: \"Blank (TypeScript)\"\n      }), \" :\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"npx create-expo-app Hello --template\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Ensuite, on démarre l'application pour un émulateur Android. Comme pour la première application, le premier build peut être long :\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-shell\",\n        children: \"npm run android\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Vous avez certainement remarqué que nous n'avons pas eu besoin de démarrer un serveur Metro, Expo s'en charge.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}